import os
import json
import pickle
import joblib
import pandas as pd
from flask import Flask, jsonify, request
from peewee import (
    SqliteDatabase, PostgresqlDatabase, Model, IntegerField,
    FloatField, TextField, IntegrityError
)
from playhouse.shortcuts import model_to_dict


########################################
# Begin database stuff

DB = SqliteDatabase('predictions.db')


class Prediction(Model):
    observation_id = IntegerField(unique=True)
    observation = TextField()
    proba = FloatField()
    true_class = IntegerField(null=True)

    class Meta:
        database = DB


DB.create_tables([Prediction], safe=True)

# End database stuff
########################################

########################################
# Unpickle the previously-trained model


with open(os.path.join('exercise_data', 'columns.json')) as fh:
    columns = json.load(fh)


with open(os.path.join('exercise_data', 'pipeline.pickle'), 'rb') as fh:
    pipeline = joblib.load(fh)


with open(os.path.join('exercise_data', 'dtypes.pickle'), 'rb') as fh:
    dtypes = pickle.load(fh)


# End model un-pickling
########################################

########################################
# Input validation functions


def check_categorical_values(observation):
    """
        Validates that all categorical fields are in the observation and values are valid
        
        Returns:
        - assertion value: True if all provided categorical columns contain valid values, 
                           False otherwise
        - error message: empty if all provided columns are valid, False otherwise
    """
    
    valid_category_map = {
        "sex": ["Male", "Female"],
        "race":  ["White", "Black", "Asian-Pac-Islander", "Amer-Indian-Eskimo", "Other"]}
    
    for key, valid_categories in valid_category_map.items():
        if key in observation['data']:
            value = observation['data'][key]
            if value not in valid_categories:
                error = "Invalid value provided for {}: {}. Allowed values are: {}".format(
                    key, value, ",".join(["'{}'".format(v) for v in valid_categories]))
                return False, error
        else:
            error = "Categorical field {} missing"
            return False, error

    return True, ""

def check_hour(observation):
    if not isinstance(observation['data']['hours-per-week'], int):
        error = "Field `hours-per-week` is not an integer"
        return False, error
    
    if observation['data']['hours-per-week'] < 0 or observation['data']['hours-per-week'] > 168:
        error = "Field `hours-per-week` %s is not valid" % (observation['data']['hours-per-week'],)
        return False, error

    return True, ""
    
def attempt_predict(request):
    """
    Produce prediction for request.
    
    Inputs:
        request: dictionary with the format described below
        {
            "observation_id": <id-as-a-string>,
            "data": {
                "age": <value>,
                "sex": <value>,
                "race": <value>,
                "workclass": <value>,
                "education": <value>,
                "marital-status": <value>,
                "capital-gain": <value>,
                "capital-loss": <value>,
                "hours-per-week": <value>,
            }
        }
     
    Returns: A dictionary with predictions or an error, the two potential values:
                if the request is OK and was properly parsed and predicted:
                {
                    "observation_id": <id-of-request>,
                    "prediction": <True|False>,
                    "probability": <probability generated by model>
                }
                otherwise:
                {
                    "observation_id": <id-of-request>,
                    "error": "some error message"
                }
    """

    # YOUR CODE HERE
    # check1: field observation_id in the request:
    if 'observation_id' in request:
        chk_observation_id_present=True
    else:
        chk_observation_id_present=False
        overall_checks_response={
                    "observation_id": None,
                    "error": "observation_id is missing"
                }

    # check2: no missing 'data' in the request:
    if 'data' in request:
        chk_data_present=True
    else:
        chk_data_present=False
        overall_checks_response={
                    "observation_id": request['observation_id'],
                    "error": "data is missing"
            }
    # check3: no missing column in the request:
    expected_columns=["age","sex","race","workclass","education","marital-status","capital-gain","capital-loss","hours-per-week"]
    chk_all_columns_present=True
    for col in expected_columns:
        if chk_all_columns_present==True:
            try:
                    if col in request['data']:
                        chk_all_columns_present=True

                    else:
                        chk_all_columns_present=False
                        overall_checks_response={
                            "observation_id": request['observation_id'],
                            "error": "column %s is missing" % (col,)
                            }

            except:
                    chk_all_columns_present=False
        else:
            None

    # check4: check if extra columns in the request:
    chk_extra_columns_present=True
    if chk_extra_columns_present==True:
        try:
            for col in  request['data']:
                if col not in expected_columns:
                    chk_extra_columns_present=False
                    overall_checks_response={
                                "observation_id": request['observation_id'],
                                "error": "unexpected %s column" % (col,)
                                }
                else:
                    chk_extra_columns_present=True
        except:
            chk_extra_columns_present=False
    else:
        None

    #check 5 - valid categories
    chk_valid_categories=True
    if chk_valid_categories==True:
        try:
            if check_categorical_values(request)[0]==False:
                chk_valid_categories,err=check_categorical_values(request)
                overall_checks_response={
                                        "observation_id": request['observation_id'],
                                        "error": err
                                        }
            else:
                chk_valid_categories=True
        except:
            chk_valid_categories=False
    else:
        None
    
    #check 6 - valid hours per week
    chk_valid_hours=True
    if chk_valid_hours==True:
        try:
            if check_hour(request)[0]==False:
                chk_valid_hours,err=check_hour(request)
                overall_checks_response={
                                        "observation_id": request['observation_id'],
                                        "error": err
                                        }
            else:
                chk_valid_hours=True
        except:
            chk_valid_hours=False
    else:
        None

    #check 7 - valid age
    chk_valid_age=True
    if chk_valid_age==True:
        try:
            if request['data']['age']<1 or request['data']['age']>120:
                chk_valid_age=False
                overall_checks_response={
                                "observation_id": request['observation_id'],
                                "error": "age %s is not valid" % (request['data']['age'],)
                                }
            else:
                chk_valid_age=True
        except:
            chk_valid_age=False
    else:
        None  

    #check 8 - valid capital gain
    chk_valid_capitalgain=True
    if chk_valid_capitalgain==True:
        try:
            if request['data']['capital-gain']<0 or request['data']['capital-gain']>999999999:
                chk_valid_capitalgain=False
                overall_checks_response={
                                "observation_id": request['observation_id'],
                                "error": "capital-gain %s is not valid" % (request['data']['capital-gain'],)
                                }
            else:
                chk_valid_capitalgain=True
        except:
            chk_valid_capitalgain=False
    else:
        None  

    #check 9 - valid capital loss
    chk_valid_capitalloss=True
    if chk_valid_capitalloss==True:
        try:
            if request['data']['capital-loss']<0 or request['data']['capital-loss']>999999999:
                chk_valid_capitalloss=False
                overall_checks_response={
                                "observation_id": request['observation_id'],
                                "error": "capital-loss %s is not valid" % (request['data']['capital-loss'],)
                                }
            else:
                chk_valid_capitalloss=True
        except:
            chk_valid_capitalloss=False
    else:
        None
    
    overall_checks=(chk_observation_id_present+chk_data_present+chk_all_columns_present+
                    chk_extra_columns_present+chk_valid_categories+chk_valid_hours+chk_valid_age+chk_valid_capitalgain+chk_valid_capitalloss)
    return overall_checks, overall_checks_response
        
    

# End input validation functions
########################################

########################################
# Begin webserver stuff

app = Flask(__name__)


@app.route('/predict', methods=['POST'])
def predict():
    obs_dict = request.get_json() 
    _id = obs_dict['observation_id']
    obs = pd.DataFrame([obs_dict["data"]], columns=columns).astype(dtypes) #pd.DataFrame([observation], columns=columns).astype(dtypes)
    proba = pipeline.predict_proba(obs)[0, 1]
    prediction = pipeline.predict(obs)[0]
    response_ok = {'prediction': bool(prediction), 'proba': proba}
    p = Prediction(
        observation_id=_id,
        proba=proba,
        observation=request.data,
    )
    if attempt_predict(obs_dict)[0]==9:
        response=response_ok
    else:
        response=attempt_predict(obs_dict)[1]

    try:
        p.save()
    except IntegrityError:
        error_msg = "ERROR: Observation ID: '{}' already exists".format(_id)
        response["error"] = error_msg
        print(error_msg)
        DB.rollback()
    return jsonify(response)

    
@app.route('/update', methods=['POST'])
def update():
    obs = request.get_json()
    try:
        p = Prediction.get(Prediction.observation_id == obs['id'])
        p.true_class = obs['true_class']
        p.save()
        return jsonify(model_to_dict(p))
    except Prediction.DoesNotExist:
        error_msg = 'Observation ID: "{}" does not exist'.format(obs['id'])
        return jsonify({'error': error_msg})


    
if __name__ == "__main__":
    app.run()
